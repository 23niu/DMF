{% extends 'base.twig' %}

{% block title %}Описание фреймворка{% endblock %}

{% block content %}
    <h3>Описание фреймворка</h3>
    <p><strong>DM Framework</strong> (далее DMF) это очень простой, быстрый и функциональный PHP фреймворк.
        Вдохновлением для
        разработки послужил Python фреймворк <a href="https://www.djangoproject.com/">Django</a>, однако DMF также
        позаимствовал ряд приемов из фреймворков <a href="http://ellislab.com/codeigniter">Codeigniter</a>,
        <a href="http://symfony.com/">Symfony</a> и <a href="http://www.yiiframework.com/">Yii</a>.</p>
    <h4>Модули</h4>
    <p>В основе фреймворка лежит удобная модульная система. Каждое приложение является одним из модулей, каждый из
        которых
        может содержать собственные контроллеры, модели, формы и события. Кроме того сами модули способны
        взаимодействовать
        друг с другом. Хотите использовать модуля? Нет проблем, эта задача уже решена фреймворком.</p>
    <h4>Управление модулем</h4>
    <p>Вы можете делать с модулем своего приложения что угодно. Например, чтобы переопределить в текущем модуле
        системные
        настройки или задать свои - вам потребуется лишь создать в папке модуля файл config.php. Тоже самое применимо
        также
        к событиям и шаблонному контексту.</p>
    <h4>Шаблонизация</h4>
    <p>В качестве шаблонизатора используется <a href="http://twig.sensiolabs.org/">Twig</a>. Это очень удобный и
        продвинутый
        шаблонизатор, созданный опытными разработчиками. Благодаря ему DMF имеет в себе все преимущества качественного
        шаблонизатора.
        Каждый из модулей хранит шаблоны в папке View. Чтобы отдать клиенту готовый и скомпилированный шаблон достаточно
        лишь выполнить
        метод <code>$this->render('template');</code>, где template это имя шаблона. Путь к шаблону и расширение DMF
        поставит сам.</p>
    <h4>Управление выводом</h4>
    <p>Вы можете вывести клиенту обычную строку, если в этом возникнет необходимость. Для этого необходимо использовать
        метод
        <code>$this->string('Hello, World!');</code>, которому передать любую строку. Если необходимо вывести какие-либо
        структурированные
        данные, например содержимое массива, то вам поможет метод <code>$this->dump($data);</code>. Все вышеуказанные
        методы
        позволяют указать кастомные HTTP код, а также любые HTTP заголовки.</p>

    <ul class="pager">
        <li class="next"><a href="{{ base_url }}/doc/installation.html">Установка фреймворка &rarr;</a></li>
    </ul>
{% endblock %}