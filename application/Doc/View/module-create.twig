{% extends 'base.twig' %}

{% block title %}Создание модуля{% endblock %}

{% block content %}
    <h3>Создание модуля</h3>
    <p>Создание модуля и подключение его к фреймворку представляет собой довольно тривиальную задачу и состоит всего
        из нескольких простых шагов.</p>
    <h4>Создание папки с модулем</h4>
    <p>На данном этапе вам необходимо определить, в какой именно папке будет находится ваш модуль. По умолчанию
        рекомендуется использовать для этого папку <code>application</code> фреймворка.</p>
    <p>Если вы выбрали для создания именно эту папку, то вам остается лишь создать папка, которая будет являтся вашим
        модулем и зарегистрировать его в системе.</p>
    <p>Если вы решили использовать для создания модуля собственную папку или размещаете модуль в подпапке, то вам,
        возможно, придется также зарегистрировать корень пространства имен вашего модуля, об этом чуть ниже.</p>
    <h4>Регистрация модуля</h4>
    <p>Регистрация модулей происходит в папке <code>framework/config/bootstrap.php</code>. Регистрация производится с
        помощью передачи методу <code>Application::get_instance()->register_modules()</code> массива со списком модулей.
        В качестве ключей массива используется имя модуля (имя папки, содержащей модуль). Имейте ввиду, что невозможна
        регистрация нескольких модулей с одинаковыми именами. Желательно использовать префикс для имен всех своих
        модулей. Однако в будущем, скорее всего, данная проблема будет решена.
        В качестве значения массива используется пространство имен вашего модуля. Если вы создавали модуль в отдельной
        директории со своим пространством имен, то в качестве корня будет необходимо указать именно его. Допустим
        ваш модуль располагается в папке <code>application</code>, корневое пространство имен которого <code>App</code>,
        ваш модуль назван <code>Example</code>. Тогда пространство имен вашего модуля будет <code>App\\Example</code>.
    </p>
    <h4>Регистрация пространства имен</h4>
    <p>Если вы по какой-то причине не хотите устанавливать свои модули в папку <code>application</code>, а
        хотите использовать отдельную папку, то вам необходимо зарегистрировать ее корневое пространство имен.
    </p>
    <p>Крайне нежелательно использовать для размещения своих модулей любые другие папки фреймворка, кроме
        <code>application</code>. Если же все-таки в этом имеется необходимость, то нужно создать новую папку на том
        же уровне, что и остальные папки фреймворка (то есть на одном уровне с папками <code>application</code>,
        <code>framework</code>, <code>public</code> и <code>tests</code>. После создания папки вам необходимо
        зарегистрировать ее пространство имен в файле <code>framework/config/autoload.php</code></p>
    <p>Регистрация пространства имен производится с помощью метода <code>Autoloader::register_namespaces()</code>,
        который принимает в качестве аргумента массив. Ключем данного массива выступает корень пространства имен
        (сегмент из
        пространства имен до первого символа \). К примеру если ваш класс доступен по имени
        <code>Foo\Bar\MyClass.php</code>, то корень пространства имен данного класса будет <code>Foo</code>.
        В качестве значения элемента массива при регистрации нужно указать абсолютный путь к директории, корень
        пространства имен которой указан. К примеру вы создали папку <code>modules</code>, где хотите хранить свои
        модули.
        Вы хотите, чтобы классы ваших модулей были доступны под корневым пространством имен <code>MyCompany</code>.
        Тогда вам необходимо отдать следующую запись методу register_namespace():
        <code>'MyCompany'=>PROJECT_PATH.'modules'</code>. Константа PROJECT_PATH содержит абсолютный путь до корневой
        папки фреймворка. Теперь ваш класс, расположенный по пути <code>modules/SuperModule/Controller/Base.php</code>
        будет доступен по пространству имен <code>MyCompany\SuperModule\Controller\Base</code>. Разумеется класс также
        должен быть определен в данном пространстве имен, иначе автозагрузка данного класса будет невозможной.
    </p>
    <p>С данного момента ваш модуль уже будет доступен системе и будет загружаться при необходимости. Однако он еще не
        содержит никакой функциональности, следовательно на следующем этапе нам необходимо создать приложение.</p>

    <ul class="pager">
        <li class="previous"><a href="{{ base_url }}/doc/module-structure.html">&larr; Структура модулей</a></li>
        <li class="next"><a href="{{ base_url }}/doc/module-firstapp.html">Создание первого приложения &rarr;</a></li>
    </ul>
{% endblock %}